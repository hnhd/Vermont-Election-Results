if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
intermediate_table
# create an index table to load in the
index.table <- data.frame(
"party" = unname(unlist(raw_table[1,])),
"candidate" = str_sub(colnames(raw_table), 1, nchar(colnames(raw_table)))
)
index.table <- index.table[-c(1,2),]
index.table
# add the candidates party, conditional upon being a party primary
if(raw.instruction$election_type[i] == 'General'){
intermediate_table$party <- index.table$party[match(intermediate_table$variable, index.table$candidate)]
} else if (raw.instruction$election_type[i] == 'Primary') {
intermediate_table$party <- raw.instruction$party[i]
}
intermediate_table
# add election year, district, and election type
intermediate_table$year <- raw.instruction$year[i]
intermediate_table$district <- raw.instruction$district[i]
intermediate_table$election_type <- raw.instruction$election_type[i]
# rename the columns
colnames(intermediate_table) <- c('City/Town', 'Precinct', 'Candidate', 'Votes', 'Party', 'Year', 'District', 'Election Type')
# clean the candidate names (must be done after loading in the party)
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]{2}', '-.')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]', ' ')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\-]', '.')
# clean the City/Town names
intermediate_table$`City/Town` <- gsub("N\\.", "North", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("E\\.", "East", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("S\\.", "South", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("W\\.", "West", intermediate_table$`City/Town`)
intermediate_table$`City/Town`<- gsub("St\\.", "Saint ", intermediate_table$`City/Town`)
# add election office
intermediate_table$Office <- raw.instruction$office[i]
# convert the abbreviations into the full names
index.office <- read.csv('../Index/index_office.csv')
intermediate_table$Office <- index.office$office[match(intermediate_table$Office, index.office$office_abbrev)]
intermediate_table$LoopValue <- i
intermediate_table# sort the columns
i <- 1512
raw_table <- read.csv(index.files[i], stringsAsFactors = FALSE)
# remove unnecessary columns columns
raw_table <- raw_table[ , -which(names(raw_table) %in% c("Ward"))]
# raw_table <- raw_table[ , -which(names(raw_table) %in% c("Total.Votes.Cast", "Ward", "Write.Ins", "Blanks"))]
# remove rows the are marked as TOTALS
raw_table <- raw_table[!grepl('TOTALS', raw_table$City.Town),]
# ncol = 2 means there were no candidates running
# nrow = 1 means that there was no votes by geography
# melt the raw table
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
intermediate_table
# create an index table to load in the
index.table <- data.frame(
"party" = unname(unlist(raw_table[1,])),
"candidate" = str_sub(colnames(raw_table), 1, nchar(colnames(raw_table)))
)
index.table <- index.table[-c(1,2),]
index.table
# add the candidates party, conditional upon being a party primary
if(raw.instruction$election_type[i] == 'General'){
intermediate_table$party <- index.table$party[match(intermediate_table$variable, index.table$candidate)]
} else if (raw.instruction$election_type[i] == 'Primary') {
intermediate_table$party <- raw.instruction$party[i]
}
intermediate_table
# add election year, district, and election type
intermediate_table$year <- raw.instruction$year[i]
intermediate_table$district <- raw.instruction$district[i]
intermediate_table$election_type <- raw.instruction$election_type[i]
# rename the columns
colnames(intermediate_table) <- c('City/Town', 'Precinct', 'Candidate', 'Votes', 'Party', 'Year', 'District', 'Election Type')
# clean the candidate names (must be done after loading in the party)
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]{2}', '-.')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]', ' ')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\-]', '.')
# clean the City/Town names
intermediate_table$`City/Town` <- gsub("N\\.", "North", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("E\\.", "East", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("S\\.", "South", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("W\\.", "West", intermediate_table$`City/Town`)
intermediate_table$`City/Town`<- gsub("St\\.", "Saint ", intermediate_table$`City/Town`)
# add election office
intermediate_table$Office <- raw.instruction$office[i]
# convert the abbreviations into the full names
index.office <- read.csv('../Index/index_office.csv')
intermediate_table$Office <- index.office$office[match(intermediate_table$Office, index.office$office_abbrev)]
intermediate_table$LoopValue <- i
intermediate_table
i <- 247
raw_table <- read.csv(index.files[i], stringsAsFactors = FALSE)
# remove unnecessary columns columns
raw_table <- raw_table[ , -which(names(raw_table) %in% c("Ward"))]
# raw_table <- raw_table[ , -which(names(raw_table) %in% c("Total.Votes.Cast", "Ward", "Write.Ins", "Blanks"))]
# remove rows the are marked as TOTALS
raw_table <- raw_table[!grepl('TOTALS', raw_table$City.Town),]
# ncol = 2 means there were no candidates running
# nrow = 1 means that there was no votes by geography
# melt the raw table
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
intermediate_table
# create an index table to load in the
index.table <- data.frame(
"party" = unname(unlist(raw_table[1,])),
"candidate" = str_sub(colnames(raw_table), 1, nchar(colnames(raw_table)))
)
index.table <- index.table[-c(1,2),]
index.table
# add the candidates party, conditional upon being a party primary
if(raw.instruction$election_type[i] == 'General'){
intermediate_table$party <- index.table$party[match(intermediate_table$variable, index.table$candidate)]
} else if (raw.instruction$election_type[i] == 'Primary') {
intermediate_table$party <- raw.instruction$party[i]
}
intermediate_table
# add election year, district, and election type
intermediate_table$year <- raw.instruction$year[i]
intermediate_table$district <- raw.instruction$district[i]
intermediate_table$election_type <- raw.instruction$election_type[i]
# rename the columns
colnames(intermediate_table) <- c('City/Town', 'Precinct', 'Candidate', 'Votes', 'Party', 'Year', 'District', 'Election Type')
# clean the candidate names (must be done after loading in the party)
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]{2}', '-.')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]', ' ')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\-]', '.')
# clean the City/Town names
intermediate_table$`City/Town` <- gsub("N\\.", "North", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("E\\.", "East", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("S\\.", "South", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("W\\.", "West", intermediate_table$`City/Town`)
intermediate_table$`City/Town`<- gsub("St\\.", "Saint ", intermediate_table$`City/Town`)
# add election office
intermediate_table$Office <- raw.instruction$office[i]
# convert the abbreviations into the full names
index.office <- read.csv('../Index/index_office.csv')
intermediate_table$Office <- index.office$office[match(intermediate_table$Office, index.office$office_abbrev)]
intermediate_table$LoopValue <- i
intermediate_table
index.table <- data.frame(
"party" = unname(unlist(raw_table[1,])),
"candidate" = str_sub(colnames(raw_table), 1, nchar(colnames(raw_table)))
)
index.table <- index.table[-c(1,2),]
index.table
i <- 1512
raw_table <- read.csv(index.files[i], stringsAsFactors = FALSE)
raw_table <- raw_table[ , -which(names(raw_table) %in% c("Ward"))]
raw_table <- raw_table[!grepl('TOTALS', raw_table$City.Town),]
raw_table
raw_table[-1, ]
raw_table <- raw_table[-1, ]
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table, c("City.Town", "Pct"))
}
i <- 1512
raw_table <- read.csv(index.files[i], stringsAsFactors = FALSE)
# remove unnecessary columns columns
raw_table <- raw_table[ , -which(names(raw_table) %in% c("Ward"))]
# raw_table <- raw_table[ , -which(names(raw_table) %in% c("Total.Votes.Cast", "Ward", "Write.Ins", "Blanks"))]
# remove rows the are marked as TOTALS
raw_table <- raw_table[!grepl('TOTALS', raw_table$City.Town),]
i <- 1512
raw_table <- read.csv(index.files[i], stringsAsFactors = FALSE)
# remove unnecessary columns columns
raw_table <- raw_table[ , -which(names(raw_table) %in% c("Ward"))]
# raw_table <- raw_table[ , -which(names(raw_table) %in% c("Total.Votes.Cast", "Ward", "Write.Ins", "Blanks"))]
# remove rows the are marked as TOTALS
raw_table <- raw_table[!grepl('TOTALS', raw_table$City.Town),]
# ncol = 2 means there were no candidates running
# nrow = 1 means that there was no votes by geography
raw_table
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"), preserve.na = T)
}
intermediate_table
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"), stringsAsFactors = FALSE)
}
library(reshape2)
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
intermediate_table
detach(package:reshape)
library(reshape2)
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
intermediate_table
tables <- list()
for (i in 1:length(raw.instruction$year)) {
# load the file in
i <- 1512
raw_table <- read.csv(index.files[i], stringsAsFactors = FALSE)
# remove unnecessary columns columns
raw_table <- raw_table[ , -which(names(raw_table) %in% c("Ward"))]
# raw_table <- raw_table[ , -which(names(raw_table) %in% c("Total.Votes.Cast", "Ward", "Write.Ins", "Blanks"))]
# remove rows the are marked as TOTALS
raw_table <- raw_table[!grepl('TOTALS', raw_table$City.Town),]
# ncol = 2 means there were no candidates running
# nrow = 1 means that there was no votes by geography
# melt the raw table
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
# create an index table to load in the
index.table <- data.frame(
"party" = unname(unlist(raw_table[1,])),
"candidate" = str_sub(colnames(raw_table), 1, nchar(colnames(raw_table)))
)
index.table <- index.table[-c(1,2),]
# add the candidates party, conditional upon being a party primary
if(raw.instruction$election_type[i] == 'General'){
intermediate_table$party <- index.table$party[match(intermediate_table$variable, index.table$candidate)]
} else if (raw.instruction$election_type[i] == 'Primary') {
intermediate_table$party <- raw.instruction$party[i]
}
intermediate_table
# add election year, district, and election type
intermediate_table$year <- raw.instruction$year[i]
intermediate_table$district <- raw.instruction$district[i]
intermediate_table$election_type <- raw.instruction$election_type[i]
# rename the columns
colnames(intermediate_table) <- c('City/Town', 'Precinct', 'Candidate', 'Votes', 'Party', 'Year', 'District', 'Election Type')
# clean the candidate names (must be done after loading in the party)
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]{2}', '-.')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]', ' ')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\-]', '.')
# clean the City/Town names
intermediate_table$`City/Town` <- gsub("N\\.", "North", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("E\\.", "East", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("S\\.", "South", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("W\\.", "West", intermediate_table$`City/Town`)
intermediate_table$`City/Town`<- gsub("St\\.", "Saint ", intermediate_table$`City/Town`)
# add election office
intermediate_table$Office <- raw.instruction$office[i]
# convert the abbreviations into the full names
index.office <- read.csv('../Index/index_office.csv')
intermediate_table$Office <- index.office$office[match(intermediate_table$Office, index.office$office_abbrev)]
intermediate_table$LoopValue <- i
# sort the columns
intermediate_table <- intermediate_table[c(10,6,9,8,7,1,2,3,5,4)]
# throw the intermediate table into a list
tables[[i]] <- intermediate_table
#names(tables[[i]]) <- raw.instruction$wd[i]
}
merged.table <- do.call(rbind, tables)
tables <- list()
for (i in 1:length(raw.instruction$year)) {
# load the file in
raw_table <- read.csv(index.files[i], stringsAsFactors = FALSE)
# remove unnecessary columns columns
raw_table <- raw_table[ , -which(names(raw_table) %in% c("Ward"))]
# raw_table <- raw_table[ , -which(names(raw_table) %in% c("Total.Votes.Cast", "Ward", "Write.Ins", "Blanks"))]
# remove rows the are marked as TOTALS
raw_table <- raw_table[!grepl('TOTALS', raw_table$City.Town),]
# ncol = 2 means there were no candidates running
# nrow = 1 means that there was no votes by geography
# melt the raw table
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
# create an index table to load in the
index.table <- data.frame(
"party" = unname(unlist(raw_table[1,])),
"candidate" = str_sub(colnames(raw_table), 1, nchar(colnames(raw_table)))
)
index.table <- index.table[-c(1,2),]
# add the candidates party, conditional upon being a party primary
if(raw.instruction$election_type[i] == 'General'){
intermediate_table$party <- index.table$party[match(intermediate_table$variable, index.table$candidate)]
} else if (raw.instruction$election_type[i] == 'Primary') {
intermediate_table$party <- raw.instruction$party[i]
}
intermediate_table
# add election year, district, and election type
intermediate_table$year <- raw.instruction$year[i]
intermediate_table$district <- raw.instruction$district[i]
intermediate_table$election_type <- raw.instruction$election_type[i]
# rename the columns
colnames(intermediate_table) <- c('City/Town', 'Precinct', 'Candidate', 'Votes', 'Party', 'Year', 'District', 'Election Type')
# clean the candidate names (must be done after loading in the party)
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]{2}', '-.')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]', ' ')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\-]', '.')
# clean the City/Town names
intermediate_table$`City/Town` <- gsub("N\\.", "North", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("E\\.", "East", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("S\\.", "South", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("W\\.", "West", intermediate_table$`City/Town`)
intermediate_table$`City/Town`<- gsub("St\\.", "Saint ", intermediate_table$`City/Town`)
# add election office
intermediate_table$Office <- raw.instruction$office[i]
# convert the abbreviations into the full names
index.office <- read.csv('../Index/index_office.csv')
intermediate_table$Office <- index.office$office[match(intermediate_table$Office, index.office$office_abbrev)]
intermediate_table$LoopValue <- i
# sort the columns
intermediate_table <- intermediate_table[c(10,6,9,8,7,1,2,3,5,4)]
# throw the intermediate table into a list
tables[[i]] <- intermediate_table
#names(tables[[i]]) <- raw.instruction$wd[i]
}
merged.table <- do.call(rbind, tables)
i <-1512
# load the file in
raw_table <- read.csv(index.files[i], stringsAsFactors = FALSE)
# remove unnecessary columns columns
raw_table <- raw_table[ , -which(names(raw_table) %in% c("Ward"))]
# raw_table <- raw_table[ , -which(names(raw_table) %in% c("Total.Votes.Cast", "Ward", "Write.Ins", "Blanks"))]
# remove rows the are marked as TOTALS
raw_table <- raw_table[!grepl('TOTALS', raw_table$City.Town),]
# ncol = 2 means there were no candidates running
# nrow = 1 means that there was no votes by geography
# melt the raw table
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
# create an index table to load in the
index.table <- data.frame(
"party" = unname(unlist(raw_table[1,])),
"candidate" = str_sub(colnames(raw_table), 1, nchar(colnames(raw_table)))
)
index.table <- index.table[-c(1,2),]
index.table
# add the candidates party, conditional upon being a party primary
if(raw.instruction$election_type[i] == 'General'){
intermediate_table$party <- index.table$party[match(intermediate_table$variable, index.table$candidate)]
} else if (raw.instruction$election_type[i] == 'Primary') {
intermediate_table$party <- raw.instruction$party[i]
}
intermediate_table
# add election year, district, and election type
intermediate_table$year <- raw.instruction$year[i]
intermediate_table$district <- raw.instruction$district[i]
intermediate_table$election_type <- raw.instruction$election_type[i]
# rename the columns
colnames(intermediate_table) <- c('City/Town', 'Precinct', 'Candidate', 'Votes', 'Party', 'Year', 'District', 'Election Type')
# clean the candidate names (must be done after loading in the party)
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]{2}', '-.')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]', ' ')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\-]', '.')
# clean the City/Town names
intermediate_table$`City/Town` <- gsub("N\\.", "North", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("E\\.", "East", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("S\\.", "South", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("W\\.", "West", intermediate_table$`City/Town`)
intermediate_table$`City/Town`<- gsub("St\\.", "Saint ", intermediate_table$`City/Town`)
# add election office
intermediate_table$Office <- raw.instruction$office[i]
# convert the abbreviations into the full names
index.office <- read.csv('../Index/index_office.csv')
intermediate_table$Office <- index.office$office[match(intermediate_table$Office, index.office$office_abbrev)]
intermediate_table$LoopValue <- i
# sort the columns
intermediate_table <- intermediate_table[c(10,6,9,8,7,1,2,3,5,4)]
intermediate_table
for (i in 1:length(raw.instruction$year)) {
# load the file in
raw_table <- read.csv(index.files[i], stringsAsFactors = FALSE)
# remove unnecessary columns columns
raw_table <- raw_table[ , -which(names(raw_table) %in% c("Ward"))]
# raw_table <- raw_table[ , -which(names(raw_table) %in% c("Total.Votes.Cast", "Ward", "Write.Ins", "Blanks"))]
# remove rows the are marked as TOTALS
raw_table <- raw_table[!grepl('TOTALS', raw_table$City.Town),]
# ncol = 2 means there were no candidates running
# nrow = 1 means that there was no votes by geography
# melt the raw table
if(nrow(raw_table) == 1 | ("No.Nomination" %in% names(raw_table))) {
intermediate_table <- data.frame("City.Town" <- "", "Pct" <- "", "variable" <- colnames(raw_table[3]), "value" <- "")
} else {
intermediate_table <- melt(raw_table[-1 , ], c("City.Town", "Pct"))
}
# create an index table to load in the
index.table <- data.frame(
"party" = unname(unlist(raw_table[1,])),
"candidate" = str_sub(colnames(raw_table), 1, nchar(colnames(raw_table)))
)
index.table <- index.table[-c(1,2),]
# add the candidates party, conditional upon being a party primary
if(raw.instruction$election_type[i] == 'General'){
intermediate_table$party <- index.table$party[match(intermediate_table$variable, index.table$candidate)]
} else if (raw.instruction$election_type[i] == 'Primary') {
intermediate_table$party <- raw.instruction$party[i]
}
# add election year, district, and election type
intermediate_table$year <- raw.instruction$year[i]
intermediate_table$district <- raw.instruction$district[i]
intermediate_table$election_type <- raw.instruction$election_type[i]
# rename the columns
colnames(intermediate_table) <- c('City/Town', 'Precinct', 'Candidate', 'Votes', 'Party', 'Year', 'District', 'Election Type')
# clean the candidate names (must be done after loading in the party)
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]{2}', '-.')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\.]', ' ')
intermediate_table$Candidate <- str_replace_all(intermediate_table$Candidate, '[\\-]', '.')
# clean the City/Town names
intermediate_table$`City/Town` <- gsub("N\\.", "North", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("E\\.", "East", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("S\\.", "South", intermediate_table$`City/Town`)
intermediate_table$`City/Town` <- gsub("W\\.", "West", intermediate_table$`City/Town`)
intermediate_table$`City/Town`<- gsub("St\\.", "Saint ", intermediate_table$`City/Town`)
# add election office
intermediate_table$Office <- raw.instruction$office[i]
# convert the abbreviations into the full names
index.office <- read.csv('../Index/index_office.csv')
intermediate_table$Office <- index.office$office[match(intermediate_table$Office, index.office$office_abbrev)]
intermediate_table$LoopValue <- i
# sort the columns
intermediate_table <- intermediate_table[c(10,6,9,8,7,1,2,3,5,4)]
# throw the intermediate table into a list
tables[[i]] <- intermediate_table
#names(tables[[i]]) <- raw.instruction$wd[i]
}
merged.table <- do.call(rbind, tables)
tables[[1512]]
subset(merged.table, LoopValue == 1512)
tst <- subset(merged.table, LoopValue == 1512)
View(tst)
library(ggplot2)
View(raw_table)
tst
range_scan <- function(reference_table, variable) {
summary(reference_table$variable)
}
range_scan(reference_table = tst, variable = Votes)
range_scan(reference_table = tst, variable = 'Votes')
range_scan('reference_table' = tst, variable = 'Votes')
range_scan <- function(reference_table, variable) {
summary(paste0(reference_table, '$', variable))
}
range_scan('reference_table' = tst, variable = 'Votes')
summary(tst$Votes)
range_scan(reference_table = 'tst', variable = 'Votes')
summary(tst$Votes)
range(tst$Votes)
tst$Votes
summary(as.numeric(tst$Votes))
range_scan <- function(reference_table, variable) {
summary(as.numeric(paste0(reference_table, '$', variable)))
}
range_scan(reference_table = 'tst', variable = 'Votes')
range_scan(reference_table = tst, variable = Votes)
range_scan(reference_table = tst, variable = 'Votes')
range_scan(reference_table = 'tst', variable = 'Votes')
as.numeric(paste0(reference_table, '$', variable)
as.numeric(paste0(reference_table, '$', variable))
paste0(reference_table, '$', variable)
reference_table = 'tst'
variable = 'Votes'
paste0(reference_table, '$', variable)
reference_table[ , variable]
reference_table[ , c(variable)]
reference_table[1, ]
reference_table = tst
variable = Votes
variable = 'Votes'
reference_table[, variable]
summary_vector <- reference_table[, variable]
range_scan <- function(reference_table, variable) {
summary_vector <- as.numeric(reference_table[, variable])
return(summary(summary_vector))
}
range_scan(tst, 'Votes')
summary(tst$Votes)
summary(as.numeric(tst$Votes))
summary(as.numeric(tst$Votes))[1]
summary(as.numeric(tst$Votes))[c(1,4)]
range_scan(tst, Votes)
range_scan(tst, 3 * 'Votes')
range_scan(tst, (3 * 'Votes'))
range_scan(tst, variable = 3 * 'Votes')
range_scan(tst, variable = paste0(3 * 'Votes'))
install.packages(extrafont)
install.packages('extrafont')
install.packages(extrafont)
install.packages(extrafont)
install.packages('extrafont')
font_import()
library(extrafont)
font_import()
